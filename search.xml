<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>云计算的概念</title>
    <url>/2020/07/14/%E4%BA%91%E8%AE%A1%E7%AE%97%E7%9A%84%E6%A6%82%E5%BF%B5/</url>
    <content><![CDATA[<h3 id="Azure基础知识：云概念-云计算的原则"><a href="#Azure基础知识：云概念-云计算的原则" class="headerlink" title="Azure基础知识：云概念 - 云计算的原则"></a>Azure基础知识：云概念 - 云计算的原则</h3><a id="more"></a>
<h4 id="什么是云计算"><a href="#什么是云计算" class="headerlink" title="什么是云计算"></a>什么是云计算</h4><p>云计算是指通过 Internet 提供的、使用即用即付定价模式的计算服务。 换句话说，它是一种从其他人的数据中心租用计算能力和存储的方法。</p>
<h4 id="云计算的优势"><a href="#云计算的优势" class="headerlink" title="云计算的优势"></a>云计算的优势</h4><p>云计算让经营企业变得更加轻松。 云计算经济高效、可缩放、具有弹性、始终保持最新状态、可靠且安全。 这意味着你可以将更多时间花在重要事项上，而只需花较少时间来管理基础细节。</p>
<h4 id="规模效益"><a href="#规模效益" class="headerlink" title="规模效益"></a>规模效益</h4><p>规模效益是指大规模运作时，能够较高效地或以较低的单位成本完成任务。 这种成本优势是云计算的一个重要优势。</p>
<h4 id="资本支出-CapEx-与运营支出-OpEx"><a href="#资本支出-CapEx-与运营支出-OpEx" class="headerlink" title="资本支出 (CapEx) 与运营支出 (OpEx)"></a>资本支出 (CapEx) 与运营支出 (OpEx)</h4><ul>
<li>资本支出 (CapEx)：CapEx 是预先将资金花在实体基础设施上，然后逐渐从税单中扣除这笔费用。 CapEx 是一种前期成本，其价值会随着时间的推移而降低。</li>
</ul>
<ol>
<li>服务器成本</li>
<li>存储成本</li>
<li>网络成本</li>
<li>备份和存档的成本</li>
<li>组织连续性和灾难恢复成本</li>
<li>数据中心基础设施成本</li>
<li>技术人员</li>
</ol>
<ul>
<li>运营支出 (OpEx)：OpEx 是现在花钱购买服务或产品，现在为其付费。 可以在同一年从税单中扣除此项费用。 无前期成本。 你可以在使用服务或产品时为其付费。</li>
</ul>
<ol>
<li>租用软件和自定义功能</li>
<li>根据使用/需求而不是固定硬件或容量来缩减费用</li>
<li>在用户或组织级别计费</li>
</ol>
<h4 id="云计算的三种部署方法"><a href="#云计算的三种部署方法" class="headerlink" title="云计算的三种部署方法"></a>云计算的三种部署方法</h4><p>公有云、私有云和混合云</p>
<h4 id="云服务的类型"><a href="#云服务的类型" class="headerlink" title="云服务的类型"></a>云服务的类型</h4><ul>
<li>基础结构即服务 (IaaS)</li>
<li>平台即服务 (PaaS)</li>
<li>软件即服务 (SaaS)<br>管理职责<img src="/2020/07/14/%E4%BA%91%E8%AE%A1%E7%AE%97%E7%9A%84%E6%A6%82%E5%BF%B5/2020-07-14-%E4%BA%91%E8%AE%A1%E7%AE%97%E7%9A%84%E6%A6%82%E5%BF%B5.png" class>
<img src="/2020/07/14/%E4%BA%91%E8%AE%A1%E7%AE%97%E7%9A%84%E6%A6%82%E5%BF%B5/WX20200714-233003@2x.png" class></li>
</ul>
]]></content>
      <categories>
        <category>Azure</category>
      </categories>
      <tags>
        <tag>Azure</tag>
        <tag>云计算</tag>
      </tags>
  </entry>
  <entry>
    <title>Vuex</title>
    <url>/2020/02/03/Vuex/</url>
    <content><![CDATA[<h3 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h3><a id="more"></a>
<p>打开终端 安装Vuex</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">npm <span class="keyword">install</span> vuex</span><br></pre></td></tr></table></figure>
<p>导入vuex<br>在index.js文件中<code>import Vuex from &#39;vuex&#39;</code><br><code>Vue.use(vuex)</code></p>
<p>写一个简单的例子</p>
<figure class="highlight pf"><table><tr><td class="code"><pre><span class="line">export <span class="keyword">default</span> new Vuex.Store(&#123;</span><br><span class="line">  <span class="keyword">state</span>: &#123;</span><br><span class="line">    count: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    increment (<span class="keyword">state</span>) &#123;</span><br><span class="line">      <span class="keyword">state</span>.count++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  actions: &#123;</span><br><span class="line">    increment (context) &#123;</span><br><span class="line">      context.commit('increment')</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>在main.js里引入</p>
<figure class="highlight clean"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'./store'</span></span><br></pre></td></tr></table></figure>

<p>启动项目</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">npm <span class="keyword">run</span><span class="bash"> serve</span></span><br></pre></td></tr></table></figure>
<p>打开项目首页 大功告成！<br><a href="http://localhost:8080/" target="_blank" rel="noopener">http://localhost:8080/</a></p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue-cli构建Vue项目</title>
    <url>/2020/02/03/Vue-cli%E6%9E%84%E5%BB%BAVue%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<h3 id="Vue-cli构建Vue项目"><a href="#Vue-cli构建Vue项目" class="headerlink" title="Vue-cli构建Vue项目"></a>Vue-cli构建Vue项目</h3><a id="more"></a>
<h5 id="创建新的Vue项目"><a href="#创建新的Vue项目" class="headerlink" title="创建新的Vue项目"></a>创建新的Vue项目</h5><figure class="highlight isbl"><table><tr><td class="code"><pre><span class="line"><span class="variable">vue</span> <span class="variable">init</span> <span class="variable">webpack</span> <span class="function"><span class="title">vue01</span>(项目名)</span></span><br></pre></td></tr></table></figure>
<ol>
<li>按回车确认项目名或者在光标处修改，项目名不能以大写字母开头，不能包含特殊字符。</li>
<li>项目描述 可以输入也可以直接回车确认</li>
<li>作者 可以输入也可以直接回车确认</li>
<li>项目创建方式 可以选择运行+编译或者运行</li>
<li>是否安装vue-router 可以添加也可以在之后再手动添加</li>
<li>是否添加ESlint 可以添加也可以不添加</li>
<li>设置单元测试 可以添加也可以不添加</li>
<li>e2e测试 可以添加也可以不添加</li>
<li>是否需要运行npm或者yarn 可以运行也可以不运行</li>
</ol>
<p>创建好之后cd到项目目录里</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> vue01/</span><br></pre></td></tr></table></figure>
<p>然后手动npm install</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">npm <span class="keyword">install</span></span><br></pre></td></tr></table></figure>
<p>运行</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">npm <span class="keyword">run</span><span class="bash"> dev</span></span><br></pre></td></tr></table></figure>
<h5 id="使用Vue-cli创建Vue项目"><a href="#使用Vue-cli创建Vue项目" class="headerlink" title="使用Vue-cli创建Vue项目"></a>使用Vue-cli创建Vue项目</h5><p>打开终端 安装Vue-cli</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">npm</span> install -g @vue/cli</span><br></pre></td></tr></table></figure>
<p>查看版本</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">vue <span class="comment">--version</span></span><br></pre></td></tr></table></figure>
<p>创建项目</p>
<figure class="highlight isbl"><table><tr><td class="code"><pre><span class="line"><span class="variable">vue</span> <span class="variable">create</span> <span class="function"><span class="title">vue01</span>(项目名)</span></span><br></pre></td></tr></table></figure>
<ol>
<li>选择编译工具</li>
<li>router是否使用历史模式</li>
<li>想在哪里配置</li>
<li>是否保存为模版</li>
</ol>
<p>启动项目</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">npm <span class="keyword">run</span><span class="bash"> serve</span></span><br></pre></td></tr></table></figure>
<p>打开项目首页 大功告成！<br><a href="http://localhost:8080/" target="_blank" rel="noopener">http://localhost:8080/</a></p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringSecurity登录表单配置</title>
    <url>/2020/01/07/SpringSecurity%E7%99%BB%E5%BD%95%E8%A1%A8%E5%8D%95%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h3 id="SpringSecurity登录表单配置"><a href="#SpringSecurity登录表单配置" class="headerlink" title="SpringSecurity登录表单配置"></a>SpringSecurity登录表单配置</h3><a id="more"></a>
<h4 id="SpringSecurity"><a href="#SpringSecurity" class="headerlink" title="SpringSecurity"></a>SpringSecurity</h4><h5 id="1-登录成功"><a href="#1-登录成功" class="headerlink" title="1.登录成功"></a>1.登录成功</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">     http.authorizeRequests()</span><br><span class="line">     .and()</span><br><span class="line">     .formLogin()</span><br><span class="line">     .usernameParameter(<span class="string">"username"</span>)</span><br><span class="line">     .passwordParameter(<span class="string">"password"</span>)</span><br><span class="line">     .loginProcessingUrl(<span class="string">"/doLogin"</span>)</span><br><span class="line">     .loginPage(<span class="string">"/login"</span>)</span><br><span class="line">     <span class="comment">/*</span></span><br><span class="line"><span class="comment">     登录成功的回调</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">     .successHandler(<span class="keyword">new</span> AuthenticationSuccessHandler() &#123;</span><br><span class="line">         <span class="meta">@Override</span></span><br><span class="line">         <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAuthenticationSuccess</span><span class="params">(HttpServletRequest req, HttpServletResponse resp, Authentication authentication)</span></span></span><br><span class="line"><span class="function">                 <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">                 resp.setContentType(<span class="string">"application/json;charset=utf-8"</span>);</span><br><span class="line">                 PrintWriter out = resp.getWriter();</span><br><span class="line">                 Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">                 map.put(<span class="string">"status"</span>, <span class="number">200</span>);</span><br><span class="line">                 map.put(<span class="string">"msg"</span>, authentication.getPrincipal());</span><br><span class="line">                 out.write(<span class="keyword">new</span> ObjectMapper().writeValueAsString(map));</span><br><span class="line">                 out.flush();</span><br><span class="line">                 out.close();</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;)</span><br></pre></td></tr></table></figure>
<h5 id="2-登录失败"><a href="#2-登录失败" class="headerlink" title="2.登录失败"></a>2.登录失败</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">.failureHandler(<span class="keyword">new</span> AuthenticationFailureHandler() &#123;</span><br><span class="line">               <span class="meta">@Override</span></span><br><span class="line">               <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAuthenticationFailure</span><span class="params">(HttpServletRequest req, HttpServletResponse resp, AuthenticationException exception)</span></span></span><br><span class="line"><span class="function">                       <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">                           resp.setContentType(<span class="string">"application/json;charset=utf-8"</span>);</span><br><span class="line">                           PrintWriter out = resp.getWriter();</span><br><span class="line">                           Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">                           map.put(<span class="string">"status"</span>, <span class="number">401</span>);</span><br><span class="line">                           <span class="keyword">if</span>(exception <span class="keyword">instanceof</span> LockedException)&#123;</span><br><span class="line">                               map.put(<span class="string">"msg"</span>, <span class="string">"账户被锁定，请联系管理员!"</span>);</span><br><span class="line">                           &#125; <span class="keyword">else</span> <span class="keyword">if</span>(exception <span class="keyword">instanceof</span> CredentialsExpiredException)&#123;</span><br><span class="line">                               map.put(<span class="string">"msg"</span>, <span class="string">"密码过期，请联系管理员!"</span>);</span><br><span class="line">                           &#125; <span class="keyword">else</span> <span class="keyword">if</span>(exception <span class="keyword">instanceof</span> AccountExpiredException)&#123;</span><br><span class="line">                               map.put(<span class="string">"msg"</span>, <span class="string">"账户过期，请联系管理员!"</span>);</span><br><span class="line">                           &#125; <span class="keyword">else</span> <span class="keyword">if</span>(exception <span class="keyword">instanceof</span> DisabledException)&#123;</span><br><span class="line">                               map.put(<span class="string">"msg"</span>, <span class="string">"账户被禁用，请联系管理员!"</span>);</span><br><span class="line">                           &#125; <span class="keyword">else</span> <span class="keyword">if</span>(exception <span class="keyword">instanceof</span> BadCredentialsException)&#123;</span><br><span class="line">                               map.put(<span class="string">"msg"</span>, <span class="string">"用户名或者密码输入错误，请重新输入!"</span>);</span><br><span class="line">                           &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">                           	map.put(<span class="string">"msg"</span>, <span class="string">"登录失败!"</span>)</span><br><span class="line">                           &#125; </span><br><span class="line">                           out.write(<span class="keyword">new</span> ObjectMapper().writeValueAsString(map));</span><br><span class="line">                           out.flush();</span><br><span class="line">                           out.close();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;)</span><br></pre></td></tr></table></figure>
<h5 id="3-注销"><a href="#3-注销" class="headerlink" title="3.注销"></a>3.注销</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">.logout()</span><br><span class="line">.logoutUrl(<span class="string">"/logout"</span>)</span><br><span class="line">            .logoutSuccessHandler(<span class="keyword">new</span> LogoutSuccessHandler() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLogoutSuccess</span><span class="params">(HttpServletRequest req, HttpServletResponse resp, Authentication authentication)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">                    resp.setContentType(<span class="string">"application/json;charset=utf-8"</span>);</span><br><span class="line">                    PrintWriter out = resp.getWriter();</span><br><span class="line">                    Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">                    map.put(<span class="string">"status"</span>, <span class="number">200</span>);</span><br><span class="line">                    map.put(<span class="string">"msg"</span>, <span class="string">"注销成功!"</span>)</span><br><span class="line">                    out.write(<span class="keyword">new</span> ObjectMapper().writeValueAsString(map));</span><br><span class="line">                    out.flush();</span><br><span class="line">                    out.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">            .permitAll()</span><br><span class="line">            .and()</span><br><span class="line">            .csrf().disable().exceptionHandling()</span><br></pre></td></tr></table></figure>
<h5 id="4-方法安全"><a href="#4-方法安全" class="headerlink" title="4.方法安全"></a>4.方法安全</h5><p>SpringSecurity中默认默认禁用注解，要想开启注解，需要在继承WebSecurityConfigurerAdapter的类上加@EnableGlobalMethodSecurity注解，并在该类中将AuthenticationManager定义为bean。<br>在SpringSecurity配置类上加上注解<code>@EnableGlobalMethodSecurity</code><br>里面有几个属性:</p>
<ol>
<li>prePostEnable注解: <code>@EnableGlobalMethodSecurity(prePostEnabled = true)</code></li>
<li>@PreAuthorize：在方法执行前判断，可以调用方法参数，主要利用Java8的参数名反射特性，如果没用Java8也可以使用spring security的@P标注参数，或者Spring Data的@Param标注参数。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//判断用户是否为当前登录用户或拥有ROLE_ADMIN权限</span></span><br><span class="line"><span class="meta">@PreAuthorize</span>(<span class="string">"#userId == authentication.principal.userId or hasAuthority(‘ADMIN’)"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">changePassword</span><span class="params">(@P(<span class="string">"userId"</span>)</span> <span class="keyword">long</span> userId )</span>&#123;&#125;</span><br></pre></td></tr></table></figure></li>
<li>@PostAuthorize：在方法执行后判断，可以调用参数。如果EL为false，虽然方法已经执行完了也可能会回滚，EL变量returnObject表示返回的对象。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostAuthorize</span></span><br><span class="line"><span class="function">User <span class="title">getUser</span><span class="params">(<span class="string">"returnObject.userId == authentication.principal.userId or hasPermission(returnObject, 'ADMIN')"</span>)</span></span>;</span><br></pre></td></tr></table></figure></li>
<li>@PreFilter:在方法执行前判断，可以调用方法参数，对参数值进行过滤、处理或修改。EL变量filterObject表示参数，如有多个参数则用filterTarget注解参数，那么参数必须是集合或数组才行（很少用到，与分页技术不兼容）。</li>
<li>securedEnable注解: @Secured:是否有权限访问 <code>@EnableGlobalMethodSecurity(securedEnabled = true)</code><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Secured(<span class="meta-string">"IS_AUTHENTICATED_ANONYMOUSLY"</span>)</span> <span class="keyword">public</span> Account readAccount(<span class="built_in">Long</span> id);</span><br><span class="line"><span class="meta">@Secured(<span class="meta-string">"ROLE_TELLER"</span>)</span></span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>SpringSecurity</category>
      </categories>
      <tags>
        <tag>SpringSecurity</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringSecurity基础</title>
    <url>/2020/01/05/SpringSecurity%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h3 id="SpringSecurity基础"><a href="#SpringSecurity基础" class="headerlink" title="SpringSecurity基础"></a>SpringSecurity基础</h3><a id="more"></a>
<h4 id="SpringSecurity"><a href="#SpringSecurity" class="headerlink" title="SpringSecurity"></a>SpringSecurity</h4><h5 id="1-项目创建"><a href="#1-项目创建" class="headerlink" title="1. 项目创建"></a>1. 项目创建</h5><p>在 Spring Boot 中使用 Spring Security 非常容易，引入依赖即可：</p>
<img src="/2020/01/05/SpringSecurity%E5%9F%BA%E7%A1%80/WX20200105-191217@2x.png" class>
<p>pom.xml 中的 Spring Security 依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>只要加入依赖，项目的所有接口都会被自动保护起来。</p>
<h5 id="2-初次体验"><a href="#2-初次体验" class="headerlink" title="2. 初次体验"></a>2. 初次体验</h5><p>创建一个HelloController:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello Security!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>访问<code>/hello</code>，需要登录之后才能访问。</p>
<h5 id="3-用户名配置"><a href="#3-用户名配置" class="headerlink" title="3. 用户名配置"></a>3. 用户名配置</h5><p>默认情况下，登录的用户名是<code>user</code>,密码则是项目启动时随机生成的字符串，可以从启动的控制台日志中看到默认密码：<br>这个随机生成的密码，每次启动时都会变。对登录的用户名/密码进行配置，有三种不同的方式：</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">在 application.properties 中进行配置</span><br><span class="line">通过 <span class="keyword">Java </span>代码配置在内存中</span><br><span class="line">通过 <span class="keyword">Java </span>从数据库中加载</span><br></pre></td></tr></table></figure>
<h5 id="3-1-配置文件配置用户名-密码"><a href="#3-1-配置文件配置用户名-密码" class="headerlink" title="3.1 配置文件配置用户名/密码"></a>3.1 配置文件配置用户名/密码</h5><p>可以直接在 application.properties 文件中配置用户的基本信息：</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">spring.<span class="keyword">security</span>.<span class="keyword">user</span>.name=dubowen</span><br><span class="line">spring.<span class="keyword">security</span>.<span class="keyword">user</span>.<span class="keyword">password</span>=<span class="number">123</span></span><br></pre></td></tr></table></figure>
<p>配置完成后，重启项目，就可以使用这里配置的用户名/密码登录了。</p>
<h5 id="3-2-Java-配置用户名-密码"><a href="#3-2-Java-配置用户名-密码" class="headerlink" title="3.2 Java 配置用户名/密码"></a>3.2 Java 配置用户名/密码</h5><p>也可以在 Java 代码中配置用户名密码，首先需要我们创建一个 Spring Security 的配置类，集成自 WebSecurityConfigurerAdapter 类，如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        auth.inMemoryAuthentication()</span><br><span class="line">                .withUser(<span class="string">"admin"</span>).roles(<span class="string">"admin"</span>).password(<span class="string">"123"</span>)</span><br><span class="line">                .and()</span><br><span class="line">                .withUser(<span class="string">"dubowen"</span>).roles(<span class="string">"user"</span>).password(<span class="string">"123"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">PasswordEncoder <span class="title">passwordEncoder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BCryptPasswordEncoder();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里我们在 configure 方法中配置了两个用户，用户的密码都是加密之后的字符串(明文是 123)，从 Spring5 开始，强制要求密码要加密，如果非不想加密，可以使用一个过期的 PasswordEncoder 的实例 NoOpPasswordEncoder，但是不建议这么做，毕竟不安全。</p>
<figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="function">PasswordEncoder <span class="title">passwordEncoder</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">return</span> NoOpPasswordEncoder.<span class="title">getInstance</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>Spring Security 中提供了 BCryptPasswordEncoder 密码编码工具，可以非常方便的实现密码的加密加盐，相同明文加密出来的结果总是不同，这样就不需要用户去额外保存 盐的字段了，这一点比 Shiro 要方便很多。</p>
<h5 id="4-登录配置"><a href="#4-登录配置" class="headerlink" title="4.登录配置"></a>4.登录配置</h5><p>对于登录接口，登录成功后的响应，登录失败后的响应，我们都可以在 WebSecurityConfigurerAdapter 的实现类中进行配置。例如下面这样：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">         http.authorizeRequests()</span><br><span class="line">                 <span class="comment">/*</span></span><br><span class="line"><span class="comment">                 开启配置</span></span><br><span class="line"><span class="comment">                 所有请求的认证之后才可以访问</span></span><br><span class="line"><span class="comment">                  */</span></span><br><span class="line">                 .antMatchers(<span class="string">"/admin/**"</span>).hasRole(<span class="string">"admin"</span>)</span><br><span class="line">                 .antMatchers(<span class="string">"user/**"</span>).hasAnyRole(<span class="string">"admin"</span>,<span class="string">"user"</span>)</span><br><span class="line">                 <span class="comment">//登录之后就能访问</span></span><br><span class="line">                 .anyRequest().authenticated()</span><br><span class="line">                 .and()</span><br><span class="line">                 .formLogin()</span><br><span class="line">                 <span class="comment">/*</span></span><br><span class="line"><span class="comment">                 登录处的url和登录页面</span></span><br><span class="line"><span class="comment">                  */</span></span><br><span class="line">                 .loginProcessingUrl(<span class="string">"/doLogin"</span>)</span><br><span class="line">                 .permitAll()</span><br><span class="line">                 .and()</span><br><span class="line">                 .csrf.disable();</span><br><span class="line">                 </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/amdin/hello"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">admin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"hello admin!"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/user/hello"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">user</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"hello user!"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="5-忽略拦截"><a href="#5-忽略拦截" class="headerlink" title="5. 忽略拦截"></a>5. 忽略拦截</h5><p>如果某一个请求地址不需要拦截的话，有两种方式实现：</p>
<ol>
<li>设置该地址匿名访问</li>
<li>直接过滤掉该地址，即该地址不走 Spring Security 过滤器链</li>
</ol>
<p>推荐使用第二种方案，配置如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(WebSecurity web)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        web.ignoring().antMatchers(<span class="string">"/login"</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>SpringSecurity</category>
      </categories>
      <tags>
        <tag>SpringSecurity</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot配置文件和静态资源</title>
    <url>/2019/12/25/SpringBoot%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%92%8C%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90/</url>
    <content><![CDATA[<h3 id="SpringBoot配置文件和静态资源的存放位置和加载顺序"><a href="#SpringBoot配置文件和静态资源的存放位置和加载顺序" class="headerlink" title="SpringBoot配置文件和静态资源的存放位置和加载顺序"></a>SpringBoot配置文件和静态资源的存放位置和加载顺序</h3><a id="more"></a>
<h4 id="SpringBoot加载配置文件优先级顺序"><a href="#SpringBoot加载配置文件优先级顺序" class="headerlink" title="SpringBoot加载配置文件优先级顺序"></a>SpringBoot加载配置文件优先级顺序</h4><p>SpringBoot启动会扫描以下位置的application.properties或者application.yml作为默认的配置文件</p>
<ol>
<li>工程根目录:./config/</li>
<li>工程根目录:./</li>
<li>classpath:/config/</li>
<li>classpath:/</li>
</ol>
<p>加载的优先级顺序是从上向下加载，并且所有的文件都会被加载，高优先级的内容会覆盖掉优先级低的内容，形成互补配置。<br>注: </p>
<ol>
<li>如果同一个目录下，有application.yml也有application.properties，默认先读取application.properties。</li>
<li>如果同一个配置属性，在多个配置文件都配置了，默认使用第1个读取到的，后面读取的不覆盖前面读取到的。</li>
<li>创建SpringBoot项目时，一般的配置文件放置在项目的resources目录下，因为配置文件的修改，通过热部署不用重新启动项目，而热部署的作用范围是classpath下</li>
</ol>
<h4 id="配置随机值"><a href="#配置随机值" class="headerlink" title="配置随机值"></a>配置随机值</h4><p>roncoo.secret={random.value} roncoo.number={random.int}<br>roncoo.bignumber={random.long} roncoo.number.less.than.ten={random.int(10)}<br>roncoo.number.in.range=${random.int[1024,65536]}<br>读取使用注解：@Value(value = “${roncoo.secret}”)<br>注：出现黄点提示，是要提示配置元数据，可以不配置</p>
<h4 id="其他配置的介绍"><a href="#其他配置的介绍" class="headerlink" title="其他配置的介绍"></a>其他配置的介绍</h4><p>端口配置<br>server.port=8080<br>时间格式化<br>spring.jackson.date-format=yyyy-MM-dd HH:mm:ss<br>时区设置<br>spring.jackson.time-zone=Asia/Shanghai</p>
<h4 id="SpringBoot加载静态资源优先级顺序"><a href="#SpringBoot加载静态资源优先级顺序" class="headerlink" title="SpringBoot加载静态资源优先级顺序"></a>SpringBoot加载静态资源优先级顺序</h4><p>在SpringBoot中，新创建的项目中，资源默认都会存放在resources/static目录。<br>在默认情况下，一共有5个位置可以放静态资源，五个路径分别是如下五个：</p>
<ol>
<li>classpath:/MATA-INF/resources/</li>
<li>classpath:/resources/</li>
<li>classpath:/static/</li>
<li>classpath:/public/</li>
<li>/</li>
</ol>
<p>第5个<code>/</code>的意思是在 Spring Boot 项目中，默认是没有 webapp 这个目录的，当然我们也可以自己添加（例如在需要使用JSP的时候），这里第5个<code>/</code>其实就是表示webapp目录中的静态资源也不被拦截。如果同一个文件分别出现在五个目录下，那么优先级也是按照上面列出的顺序。<br>不过，虽然有5个存储目录，除了第5个用的比较少之外，其他四个，系统默认创建了<code>classpath:/static/</code>，正常情况下，我们只需要将我们的静态资源放到这个目录下即可，也不需要额外去创建其他静态资源目录。</p>
<h4 id="自定义配置"><a href="#自定义配置" class="headerlink" title="自定义配置"></a>自定义配置</h4><p>当然，这个是系统默认配置，如果我们并不想将资源放在系统默认的这五个位置上，也可以自定义静态资源位置和映射，自定义的方式也有两种，可以通过 application.properties 来定义，也可以在 Java 代码中来定义，下面分别来看。</p>
<h5 id="application-properties"><a href="#application-properties" class="headerlink" title="application.properties"></a>application.properties</h5><p>在配置文件中定义的方式比较简单，如下：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.resources.static-locations</span>=classpath:/</span><br><span class="line"><span class="attr">spring.mvc.static-path-pattern</span>=/**</span><br></pre></td></tr></table></figure>
<p>第一行配置表示定义资源位置，第二行配置表示定义请求URL规则。以上文的配置为例，如果我们这样定义了，表示可以将静态资源放在 resources目录下的任意地方，我们访问的时候当然也需要写完整的路径，例如在<code>resources/static</code>目录下有一张名为<code>1.png</code>的图片，那么访问路径就是<code>http://localhost:8080/static/1.png</code>，注意此时的static不能省略。</p>
<h5 id="Java-代码定义"><a href="#Java-代码定义" class="headerlink" title="Java 代码定义"></a>Java 代码定义</h5><p>当然，在SpringBoot中我们也可以通过Java代码来自定义，方式和Java配置的SSM比较类似，如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebMVCConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addResourceHandler(<span class="string">"/**"</span>).addResourceLocations(<span class="string">"classpath:/aaa/"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue环境搭建</title>
    <url>/2019/12/22/Vue%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h3 id="Vue的环境搭建以及NodeJS和npm"><a href="#Vue的环境搭建以及NodeJS和npm" class="headerlink" title="Vue的环境搭建以及NodeJS和npm"></a>Vue的环境搭建以及NodeJS和npm</h3><a id="more"></a>
<h4 id="Vue简介"><a href="#Vue简介" class="headerlink" title="Vue简介"></a>Vue简介</h4><p>Vue (读音 /vjuː/，类似于 view) 是一套用于构建用户界面的渐进式框架。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与现代化的工具链以及各种支持类库结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。</p>
<ol>
<li>只关注视图层</li>
<li>MVVM框架</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"num"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-for</span>=<span class="string">"i in parseInt(num)"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">v-for</span>=<span class="string">"j in i"</span>&gt;</span>&#123;&#123;j&#125;&#125;*&#123;&#123;i&#125;&#125;=&#123;&#123;i*j&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el: <span class="string">"#app"</span>,</span></span><br><span class="line">        data: &#123;</span><br><span class="line">            num:9</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="npm-Node-package-manager"><a href="#npm-Node-package-manager" class="headerlink" title="npm(Node package manager)"></a>npm(Node package manager)</h4><p>npm是随同NodeJS一起安装的包管理工具，能解决NodeJS代码部署上的很多问题，能更加方便管理。</p>
<h4 id="SPA"><a href="#SPA" class="headerlink" title="SPA"></a>SPA</h4><p>SPA（single page web application），单页面应用，是一种网络应用程序或网站的模型，它通过动态重写当前页面来与用户交互，而非传统的从服务器重新加载整个新页面。这种方法避免了页面之间切换打断用户体验，使应用程序更像一个桌面应用程序。在单页应用中，所有必要的代码（ HTML、JavaScript 和 CSS）都通过单个页面的加载而检索，或者根据需要（通常是为响应用户操作）动态装载适当的资源并添加到页面。SPA有一个缺点，因为SPA 应用部署后只有1个页面，而且这个页面只是一堆js、css引用，没有其他有效价值，因此，SPA应用不易被搜索引擎收录，所以，一般来说，SPA适合做大型企业后台管理系统。<br>Vue 使用方式大致上可以分为两大类：</p>
<ol>
<li>直接将Vue在页面中引入，不做 SPA 应用</li>
<li>SPA应用</li>
</ol>
<h4 id="基本环境搭建"><a href="#基本环境搭建" class="headerlink" title="基本环境搭建"></a>基本环境搭建</h4><p>首先需要安装两个东西：</p>
<ol>
<li>NodeJS</li>
<li>npm</li>
</ol>
<p>直接搜索下载NodeJS 即可，安装成功之后，npm 也就有了。安装成功之后，可以 在 cmd 命令行验证是否安装成功：</p>
<img src="/2019/12/22/Vue%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/WX20191222-175712@2x.png" class>
<p>NodeJS 安装成功之后，接下来安装 Vue的工具：</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">npm <span class="keyword">install</span> -g vue-cli   <span class="comment"># 只需要第一次安装时执行</span></span><br><span class="line">vue init webpack my-<span class="keyword">project</span>  <span class="comment"># 使用webpack模板创建一个vue项目</span></span><br><span class="line">cd my-<span class="keyword">project</span> <span class="comment">#进入到项目目录中</span></span><br><span class="line">npm <span class="keyword">install</span>  <span class="comment"># 下载依赖（如果在项目创建的最后一步选择了自动执行npm install，则该步骤可以省略）</span></span><br><span class="line">npm run dev <span class="comment"># 启动项目</span></span><br></pre></td></tr></table></figure>

<p>启动成功后，浏览器输入<a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a> 就能看到如下页面：</p>
<img src="/2019/12/22/Vue%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/WX20191222-184908@2x.png" class>
<p>执行<code>npm install</code>命令时，默认使用的是国外的下载源，可以通过如下代码配置为使用淘宝的镜像：</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">npm <span class="built_in">config</span> <span class="built_in">set</span> registry https:<span class="comment">//registry.npm.taobao.org</span></span><br></pre></td></tr></table></figure>

<h4 id="项目编译"><a href="#项目编译" class="headerlink" title="项目编译"></a>项目编译</h4><p>这么大一个前端项目，肯定没法直接发布运行，当开发者完成项目开发后，将 cmd 命令行定位到当前项目目录，然后执行如下命令对项目进行打包：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">npm <span class="keyword">run</span><span class="bash"> build</span></span><br></pre></td></tr></table></figure>
<p>打包成功后，当前项目目录下会生成一个 dist 文件夹，这个文件夹中有两个文件，分别是 index.html 和 static ，index.html 页面就是我们 SPA 项目中唯一的 HTML 页面了，static 中则保存了编译后的 js、css等文件，项目发布时，可以使用 nginx 独立部署 dist 中的静态文件，也可以将静态文件拷贝到 Spring Boot 项目的 static 目录下，然后对 Spring Boot 项目进行编译打包发布。</p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>如何用Mac搭建自己的博客</title>
    <url>/2019/12/22/%E5%A6%82%E4%BD%95%E7%94%A8Mac%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h3 id="今天是2020年考研的最后一天，我从今天开始写自己的博客了，为自己学习的知识找个地方存放，不断积累。"><a href="#今天是2020年考研的最后一天，我从今天开始写自己的博客了，为自己学习的知识找个地方存放，不断积累。" class="headerlink" title="今天是2020年考研的最后一天，我从今天开始写自己的博客了，为自己学习的知识找个地方存放，不断积累。"></a>今天是2020年考研的最后一天，我从今天开始写自己的博客了，为自己学习的知识找个地方存放，不断积累。</h3><a id="more"></a>
<h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><h4 id="博客搭建"><a href="#博客搭建" class="headerlink" title="博客搭建"></a>博客搭建</h4><p><strong>实际上现在搭建一个个人博客，可选方案有很多种，我参照江南一点雨的方式，用Hexo来搭建，使用Hexo需要提前在电脑上安装好Node和Git，安装成功后就可以开始Hexo的安装了。</strong><br>步骤如下：<br>1.安装Hexo<br><code>sudo npm install -g hexo-cli</code><br>2.在本地创建一个博客目录<br><code>sudo init blog</code><br>上面这个目录执行完后，会在本地创建一个blog目录，这里面就是独立博客所必须的一些文件，然后给目录一个权限。<br>3.给目录一个权限<br><code>sudo chmod -R 777 blog/</code><br>之后进入这个目录中，执行<code>npm install</code>命令，安装相关的依赖。<br>新建完成后，指定文件夹的目录如下：</p>
<figure class="highlight sqf"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── <span class="variable">_config</span>.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">|   ├── <span class="variable">_drafts</span></span><br><span class="line">|   └── <span class="variable">_posts</span></span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure>
<p>_config.yml这个文件是站点的配置文件，package.json是应用程序的信息，scaffolds是模版文件夹，themes是主题文件夹。<br>配置完成后，定位到blog目录<code>cd blog/</code>，执行<code>hexo s</code>就可以在本地启动项目了，启动成功后，在浏览器中输入<code>http://localhost:4000</code>或者按住command键点终端中的链接就可以看到网站了。<br>说到<code>hexo s</code>命令，这里还有几个常用命令，分别是：</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>简写</th>
<th>中文含义</th>
</tr>
</thead>
<tbody><tr>
<td>hexo server</td>
<td>hexo s</td>
<td>本地启动</td>
</tr>
<tr>
<td>hexo generate</td>
<td>hexo g</td>
<td>生成静态文件</td>
</tr>
<tr>
<td>hexo deploy</td>
<td>hexo d</td>
<td>部署网站</td>
</tr>
<tr>
<td>hexo clean</td>
<td></td>
<td>清除缓存和生成的静态文件</td>
</tr>
</tbody></table>
<p>这几个命令平时用的比较多</p>
<h4 id="修改主题"><a href="#修改主题" class="headerlink" title="修改主题"></a>修改主题</h4><p>一般来说，主题都会自己配置一个，Hexo现在提供282个主题，<a href="https://hexo.io/themes/" target="_blank" rel="noopener">主题地址</a>，Hexo默认的主题是landscape,我这里用了使用人数最多的hexo-theme-next主题（我个人觉得autumn主题也不错）。博客在本地能跑起来之后，接下来就是去修改主题，首先定位到你的Hexo站点目录下<code>cd blog/</code>，然后把主题文件克隆到你的<code>./themes</code>目录<code>git clone https://github.com/iissnan/hexo-theme-next themes/next</code>，这个目录下原本有一个landscape文件夹，里边放的默认的样式，当然开发者也可以直接将主题文件下载好拷贝进去，但我还是建议你使用克隆最新版本的方式，因为之后的更新可以通过 git pull 来快速更新， 而不用再次下载压缩包替换。<br>克隆成功后，修改hexo的_config.yml文件，也就是站点配置文件，将主题修改为next，如下：<br><code>theme: next</code>，到此，NexT 主题安装完成。下一步我们将验证主题是否正确启用。在切换主题之后、验证之前，我们最好使用<code>hexo clean</code>来清除Hexo的缓存。之后执行如下命令，即可看到最新的主题效果。<br><code>hexo g</code><br><code>hexo s</code></p>
<h4 id="绑定到GitHub"><a href="#绑定到GitHub" class="headerlink" title="绑定到GitHub"></a>绑定到GitHub</h4><p>博客光自己看怎么能行，我们选择把博客绑定到GitHub上，首先以<code>自己的GitHub ID . github . io</code>为名创建一个public仓库，例如我的ID为Kaciner，创建的仓库如下：</p>
<img src="/2019/12/22/%E5%A6%82%E4%BD%95%E7%94%A8Mac%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/WX20191222-155057@2x.png" class>
<p>创建成功之后，修改hexo的<code>_config.yml</code>文件，配置GitHub地址，如下</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="attribute">deploy</span>:</span><br><span class="line">  <span class="attribute">type</span>: git</span><br><span class="line">  <span class="attribute">repo</span>: git<span class="variable">@github</span>.<span class="attribute">com</span>:kaciner/kaciner.github.io.git</span><br><span class="line">  <span class="attribute">branch</span>: master</span><br></pre></td></tr></table></figure>
<p>这里根据自己的地址来配置即可，配置完成后，执行如下命令<br><code>hexo g</code><br><code>hexo d</code><br>执行完成后，就可以将数据上传到GitHub了（当然在这之前如果你没配置过GitHub公钥甚至没有GitHub账号，需要先参考GitHub官方文档<a href="https://help.github.com/en/github/authenticating-to-github/connecting-to-github-with-ssh" target="_blank" rel="noopener">配置远程仓库</a>），上传成功后，访问<code>https://kaciner.github.io</code>就可以看到自己的个人站点了。如果你对GitHub提供的域名不是特别满意，也可以自己申请一个域名，分分钟就配置好了。</p>
<h4 id="申请域名"><a href="#申请域名" class="headerlink" title="申请域名"></a>申请域名</h4><p>域名申请建议使用国外的域名提供商，不需要备案，我这里用的是.cn的域名，还得备案（哭了），我参考的大佬使用的是godaddy，因为是新加坡的域名服务商，还支持支付宝付款。</p>
<h4 id="域名和GitHub绑定"><a href="#域名和GitHub绑定" class="headerlink" title="域名和GitHub绑定"></a>域名和GitHub绑定</h4><h5 id="GitHub配置"><a href="#GitHub配置" class="headerlink" title="GitHub配置"></a>GitHub配置</h5><p>首先在博客所在目录下的 source 目录中，创建一个 CNAME 文件，文件内容就是你的域名，如下：</p>
<img src="/2019/12/22/%E5%A6%82%E4%BD%95%E7%94%A8Mac%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/WX20191222-161604@2x.png" class>
<p>然后执行 <code>hexo d</code> 命令将这个文件上传到 GitHub就可以了。</p>
<h4 id="域名解析设置"><a href="#域名解析设置" class="headerlink" title="域名解析设置"></a>域名解析设置</h4><p>域名解析这块，可以使用DNSPod去做域名解析，也可以使用godaddy自己提供的域名解析。我这里用的是DNSPod，所以首先要做的，就是修改godaddy提供的域名解析服务，登录自己的godaddy账号，找到域名管理，修改域名解析<br>服务为 DNSPod ，如下：</p>
<img src="/2019/12/22/%E5%A6%82%E4%BD%95%E7%94%A8Mac%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/WX20191222-161856@2x.png" class>
<p>然后登录到 DNSPod（没有账号注册一个），然后添加自己的域名解析，如下图：</p>
<img src="/2019/12/22/%E5%A6%82%E4%BD%95%E7%94%A8Mac%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/WX20191222-161947@2x.png" class>
<p>添加两条 A 记录，指向 GitHub 的 IP 地址，再添加一条 CNAME ，指向你的 GitHub 域名就可以了。<br>如此之后，大功告成！</p>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>博客</tag>
      </tags>
  </entry>
</search>
